name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name: cjson-linux
            archive_cmd: tar czf
            archive_ext: tar.gz
          - os: macos-latest
            asset_name: cjson-macos
            archive_cmd: tar czf
            archive_ext: tar.gz
          - os: windows-latest
            asset_name: cjson-windows
            archive_cmd: 7z a
            archive_ext: zip
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y cmake build-essential
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install cmake
    
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCJSON_BUILD_TESTS=OFF
        cmake --build . --config Release
    
    - name: Prepare release files (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp build/libcjson.* release/ 2>/dev/null || true
        cp CJson.h release/
        cp README.md LICENSE release/
        cp -r docs release/
    
    - name: Prepare release files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy "build\Release\cjson.lib" release\ 2>NUL || echo "Static lib not found"
        copy "build\Release\cjson.dll" release\ 2>NUL || echo "DLL not found"
        copy CJson.h release\
        copy README.md release\
        copy LICENSE release\
        xcopy docs release\docs\ /E /I
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        ${{ matrix.archive_cmd }} ../${{ matrix.asset_name }}-${{ steps.tag.outputs.TAG_NAME }}.${{ matrix.archive_ext }} *
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        ${{ matrix.archive_cmd }} ../${{ matrix.asset_name }}-${{ steps.tag.outputs.TAG_NAME }}.${{ matrix.archive_ext }} *
    
    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}-${{ steps.tag.outputs.TAG_NAME }}
        path: ${{ matrix.asset_name }}-${{ steps.tag.outputs.TAG_NAME }}.${{ matrix.archive_ext }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.tag.outputs.TAG_NAME }}
        draft: false
        prerelease: false
        files: |
          **/*${{ steps.tag.outputs.TAG_NAME }}.*
        body: |
          ## Changes in ${{ steps.tag.outputs.TAG_NAME }}
          
          Please see [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Downloads
          
          - **Linux**: `cjson-linux-${{ steps.tag.outputs.TAG_NAME }}.tar.gz`
          - **macOS**: `cjson-macos-${{ steps.tag.outputs.TAG_NAME }}.tar.gz`  
          - **Windows**: `cjson-windows-${{ steps.tag.outputs.TAG_NAME }}.zip`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}