name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows doesn't have gcc/clang by default
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
        include:
          # Add MSVC for Windows
          - os: windows-latest
            compiler: msvc
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
        fi
    
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        elif [ "${{ matrix.compiler }}" = "gcc" ] && [ "${{ matrix.os }}" = "macos-latest" ]; then
          export CC=gcc-13
          export CXX=g++-13
        fi
        cmake .. -DCJSON_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -DCJSON_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C Release

  sanitizer:
    name: Test with AddressSanitizer
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential clang
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        export CC=clang
        export CXX=clang++
        cmake .. -DCJSON_BUILD_TESTS=ON -DCJSON_ENABLE_SANITIZER=ON -DCMAKE_BUILD_TYPE=Debug
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Debug
    
    - name: Test with AddressSanitizer
      run: |
        cd build
        ctest --output-on-failure -C Debug

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential gcov lcov
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCJSON_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="--coverage"
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Debug
    
    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C Debug
    
    - name: Generate coverage report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cppcheck
      run: sudo apt-get update && sudo apt-get install -y cppcheck
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c99 --suppress=missingIncludeSystem \
          --suppress=unusedFunction --error-exitcode=1 \
          CJson.c CJson.h tests/